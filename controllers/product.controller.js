const ProductModel = require("../models/Product");
const cloudinary = require("../utils/cloudinary"); 

// üìå CREATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
exports.createProduct = async (req, res) => {
  try {
      const { name, description, price, categoryId } = req.body;

      if (!req.file) {
          return res.status(400).json({ message: "Please upload a product image" });
      }

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
      const result = await cloudinary.uploader.upload(req.file.path, {
          folder: "products"
      });

      const newProduct = new ProductModel({
          name,
          description,
          price,
          categoryId,
          productImage: result.secure_url
      });

      await newProduct.save();
      return res.status(201).json({ 
          message: "Product created successfully", 
          product: newProduct 
      });
  } catch (error) {
      console.error("Error creating product:", error);
      return res.status(500).json({ 
          message: "Error creating product",
          error: error.message 
      });
  }
};
// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllProducts = async (req, res) => {
  try {
    const products = await ProductModel.find()
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");
    res.json(products);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching products.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ID
exports.getProductById = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await ProductModel.findById(id)
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by ID.",
    });
  }
};

exports.updateProductById = async (req, res) => {
  const { id } = req.params;
  const {
    productName,
    productDescription,
    categoryId,
    packSize,
    productStatus,
    barcodePack,
    barcodeUnit,
    quantity,
    purchasePrice,
    sellingPricePerUnit,
    sellingPricePerPack,
    expirationDate
  } = req.body;

  try {
    let product = await ProductModel.findById(id);
    if (!product) {
      return res.status(404).send({ message: "Product not found." });
    }

    let imageUrl = product.productImage; // ‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

    // üìå ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (req.file) {
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Cloudinary
      const uploadResponse = await cloudinary.uploader.upload(req.file.path, {
        folder: "products",
      });
      imageUrl = uploadResponse.secure_url; // URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    }

    // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      {
        productName,
        productDescription,
        productImage: imageUrl, // ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á Cloudinary
        categoryId,
        packSize,
        productStatus,
        barcodePack,
        barcodeUnit,
        quantity,
        purchasePrice,
        sellingPricePerUnit,
        sellingPricePerPack,
        expirationDate
      },
      { new: true }
    );

    res.json(updatedProduct);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({ message: "Error occurred while updating product." });
  }
};

exports.deleteProductById = async (req, res) => {
  const { id } = req.params;

  try {
    const product = await ProductModel.findById(id);
    if (!product) {
      return res.status(404).send({ message: "Product not found." });
    }

    // üìå ‡∏î‡∏∂‡∏á `public_id` ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL Cloudinary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏π‡∏õ
    const imageUrl = product.productImage;
    if (imageUrl) {
      const publicId = imageUrl.split("/").pop().split(".")[0]; // ‡∏î‡∏∂‡∏á public_id ‡∏Ç‡∏≠‡∏á Cloudinary
      await cloudinary.uploader.destroy(`products/${publicId}`); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary
    }

    // üìå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await ProductModel.findByIdAndDelete(id);
    res.status(200).json({ message: "Product deleted successfully." });
  } catch (error) {
    console.log(error.message);
    res.status(500).send({ message: "Error occurred while deleting product." });
  }
};


// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
exports.getProductByBarcode = async (req, res) => {
  const { barcode } = req.params; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ barcode ‡∏à‡∏≤‡∏Å URL

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcode (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡πÑ‡∏î‡πâ)
    const product = await ProductModel.findOne({
      $or: [{ barcodePack: barcode }, { barcodeUnit: barcode }] // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
    })
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by barcode.",
    });
  }
};
